// Generated by CoffeeScript 1.3.1
(function() {
  var vie;

  vie = new VIE();

  vie.use(new vie.StanbolService({
    url: "http://dev.iks-project.eu:8080",
    proxyDisabled: true
  }));

  jQuery.widget("IKS.vieAutocomplete", {
    options: {
      vie: vie,
      select: function(e, ui) {},
      urifield: null,
      field: "rdfs:label",
      services: "stanbol",
      debug: false,
      showTooltip: true,
      depictionProperties: ["foaf:depiction", "schema:thumbnail"],
      labelProperties: ["rdfs:label", "skos:prefLabel", "schema:name", "foaf:name"],
      descriptionProperties: [
        "rdfs:comment", "skos:note", "schema:description", "skos:definition", {
          property: "skos:broader",
          makeLabel: function(propertyValueArr) {
            var labels;
            labels = _(propertyValueArr).map(function(termUri) {
              return termUri.replace(/<.*[\/#](.*)>/, "$1").replace(/_/g, "&nbsp;");
            });
            return "Subcategory of " + (labels.join(', ')) + ".";
          }
        }, {
          property: "dcterms:subject",
          makeLabel: function(propertyValueArr) {
            var labels;
            labels = _(propertyValueArr).map(function(termUri) {
              return termUri.replace(/<.*[\/#](.*)>/, "$1").replace(/_/g, "&nbsp;");
            });
            return "Subject(s): " + (labels.join(', ')) + ".";
          }
        }
      ],
      stanbolIncludeLocalSite: false,
      fallbackLanguage: "en",
      styleClass: "vie-autocomplete",
      getTypes: function() {
        return [
          {
            uri: "" + this.ns.dbpedia + "Place",
            label: 'Place'
          }, {
            uri: "" + this.ns.dbpedia + "Person",
            label: 'Person'
          }, {
            uri: "" + this.ns.dbpedia + "Organisation",
            label: 'Organisation'
          }, {
            uri: "" + this.ns.skos + "Concept",
            label: 'Concept'
          }
        ];
      },
      getSources: function() {
        return [
          {
            uri: "http://dbpedia.org/resource/",
            label: "dbpedia"
          }, {
            uri: "http://sws.geonames.org/",
            label: "geonames"
          }
        ];
      },
      source: function(req, resp) {
        var mergedEntityList, properties, success, waitingfor,
          _this = this;
        this._logger.info("req:", req);
        properties = _.flatten([this.options.labelProperties, this.options.descriptionProperties, this.options.depictionProperties]);
        properties = _(properties).map(function(prop) {
          if (typeof prop === "object") {
            return prop.property;
          } else {
            return prop;
          }
        });
        waitingfor = 0;
        mergedEntityList = [];
        success = function(entityList) {
          return _.defer(function() {
            var limit, res;
            waitingfor--;
            _this._logger.info("resp:", _(entityList).map(function(ent) {
              return ent.id;
            }));
            limit = 10;
            entityList = _(entityList).filter(function(ent) {
              if (ent.getSubject().replace(/^<|>$/g, "") === "http://www.iks-project.eu/ontology/rick/query/QueryResultSet") {
                return false;
              }
              return true;
            });
            mergedEntityList = mergedEntityList.concat(entityList);
            if (waitingfor === 0) {
              mergedEntityList = _.sortBy(mergedEntityList, function(e) {
                var s;
                s = e.get('<http://stanbol.apache.org/ontology/entityhub/query#score>');
                if (typeof s === "object") {
                  s = _.max(s);
                }
                return 0 - s;
              });
              _this._logger.info(_(mergedEntityList).map(function(e) {
                var s, uri;
                uri = e.getSubject();
                s = e.get('<http://stanbol.apache.org/ontology/entityhub/query#score>');
                return "" + uri + ": " + s;
              }));
              res = _(mergedEntityList.slice(0, limit)).map(function(entity) {
                return {
                  key: entity.getSubject().replace(/^<|>$/g, ""),
                  label: "" + (_this._getLabel(entity)) + " @ " + (_this._sourceLabel(entity.id)),
                  value: _this._getLabel(entity),
                  getUri: function() {
                    return this.key;
                  }
                };
              });
              return resp(res);
            }
          });
        };
        waitingfor++;
        this.options.vie.find({
          term: "" + req.term + (req.term.length > 3 ? '*' : ''),
          field: this.options.field,
          properties: properties
        }).using(this.options.services).execute().fail(function(e) {
          return _this._logger.error("Something wrong happened at stanbol find:", e);
        }).success(success);
        if (this.options.stanbolIncludeLocalSite) {
          this._logger.log("stanbolIncludeLocalSite");
          waitingfor++;
          return this.options.vie.find({
            term: "" + req.term + (req.term.length > 3 ? '*' : ''),
            field: this.options.field,
            properties: properties,
            local: true
          }).using(this.options.services).execute().fail(function(e) {
            return _this._logger.error("Something wrong happened at stanbol find:", e);
          }).success(success);
        }
      }
    },
    _create: function() {
      this._logger = this.options.debug ? console : {
        info: function() {},
        warn: function() {},
        error: function() {},
        log: function() {}
      };
      this.menuContainer = jQuery("<span class='" + this.options.styleClass + "'/>");
      this.menuContainer.appendTo('body');
      return this._instantiateAutocomplete();
    },
    _destroy: function() {
      return this.menuContainer.remove();
    },
    _instantiateAutocomplete: function() {
      var widget,
        _this = this;
      widget = this;
      return this.element.autocomplete({
        source: function(req, resp) {
          return _this.options.source.apply(_this, [req, resp]);
        },
        open: function(e, ui) {
          widget._logger.info("autocomplete.open", e, ui);
          if (widget.options.showTooltip) {
            return $('.ui-menu-item', $(this).data().autocomplete.menu.activeMenu).each(function() {
              var item, uri;
              item = $(this).data()["item.autocomplete"] || $(this).data()["uiAutocompleteItem"] || $(this).data()["ui-autocomplete-item"];
              uri = item.getUri();
              return $(this).entitypreview({
                vie: widget.options.vie,
                uri: uri
              });
            });
          }
        },
        select: function(e, ui) {
          _.defer(function() {
            _this.options.select(e, ui);
            _this._logger.info("autocomplete.select", e.target, ui);
            if (widget.options.urifield) {
              return widget.options.urifield.val(ui.item.key);
            }
          });
          return true;
        },
        appendTo: this.menuContainer
      });
    },
    _getUserLang: function() {
      return window.navigator.language.split("-")[0];
    },
    _getLabel: function(entity) {
      var preferredFields, preferredLanguages;
      preferredFields = this.options.labelProperties;
      preferredLanguages = [this._getUserLang(), this.options.fallbackLanguage];
      return VIE.Util.getPreferredLangForPreferredProperty(entity, preferredFields, preferredLanguages);
    },
    _sourceLabel: function(src) {
      var sourceObj, sources;
      if (!src) {
        this._logger.warn("No source");
      }
      if (!src) {
        return "";
      }
      sources = this.options.getSources();
      sourceObj = _(sources).detect(function(s) {
        return src.indexOf(s.uri) !== -1;
      });
      if (sourceObj) {
        return sourceObj.label;
      } else {
        return src.split("/")[2];
      }
    }
  });

}).call(this);
