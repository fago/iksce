<?php

/**
 * @file
 * Extends the RDF API of Drupal core to support more RDF seralizations formats
 * other RDF capabilities.
 */

/**
 * Path to the ARC2 PHP library.
 */
if (module_exists('libraries')) {
  define('RDF_ARC2_PATH', libraries_get_path('ARC2') . '/arc');
}
else {
  define('RDF_ARC2_PATH', drupal_get_path('module', 'rdfx') . '/vendor/arc');
}

/**
 * Implements hook_init().
 */
function rdfx_init() {
  // Attempts to load the ARC2 library, if available.
  if (!class_exists('ARC2') && file_exists(RDF_ARC2_PATH . '/ARC2.php')) {
    @include_once RDF_ARC2_PATH . '/ARC2.php';
  }
  module_load_include('inc', 'rdfx', 'rdfx.terms');
  module_load_include('inc', 'rdfx', 'rdfx.import');
  module_load_include('inc', 'rdfx', 'rdfx.query');
}

/*
 * Implements hook_permission().
 */
function rdfx_permission() {
  return array(
    'administer rdf' => array(
      'title' => t('Administer RDF'),
      'description' => t('Configure and setup RDFx module.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function rdfx_menu() {
  // @todo use access RDF data permission instead of access content.
//   $items['ns'] = array(
//     'title' => 'Site vocabulary',
//     'description' => 'RDF description of the site schema.',
//     'page callback' => 'drupal_get_form',
//     'access arguments' => array('access content'),
//     'file' => 'rdfx.pages.inc',
//   );
  // Add config options to the Services block on the config page. RDF is not
  // technically a service, but neither is RSS. RDF and RSS are very closely
  // aligned.
  $config_base = array(
    'access arguments' => array('administer rdf'),
    'file'             => 'rdfx.admin.inc',
  );
  $items['admin/config/services/rdf'] = array(
    'title'            => 'RDF publishing settings',
    'description'      => 'Configure how site content gets published in RDF.',
    'page callback' => 'rdfx_mapping_overview',
  ) + $config_base;
  $items['admin/config/services/rdf/mappings'] = array(
    'title' => 'RDF Mappings',
    'description'      => 'Configure how site content gets published in RDF.',
    'page callback'    => 'rdfx_mapping_overview',
    'type'             => MENU_DEFAULT_LOCAL_TASK,
  ) + $config_base;
  $items['admin/config/services/rdf/namespaces'] = array(
    'title' => 'RDF namespaces',
    'description'      => 'See all namespaces and their prefixes.',
    'page callback'    => 'rdfx_admin_namespaces',
    'type'             => MENU_LOCAL_TASK,
  ) + $config_base;
  return $items;
}

/**
 * Implements hook_help().
 */
function rdfx_help($path, $arg) {
  switch($path) {
    case 'admin/config/services/rdf/namespaces';
      return '<p>' . t('Manage the namespaces and associated prefixes used by the site. Prefixes allow URIs to be shortened in the form of <a href="http://en.wikipedia.org/wiki/CURIE">CURIEs</a> (Compact URIs). For example, the CURIE %curie represents the URI %uri.', array('%curie' => 'dc:title', '%uri' => 'http://purl.org/dc/terms/title')) . '</p>';
    case 'admin/config/services/rdf/mappings':
      if (module_exists('rdfui')) {
        $message = t('Manage RDF mappings for entity types and field bundles used throughout the site. Some mappings are not editable through the UI. See the core RDF mapping API !documentation to find out how to modify these mappings.', array('!documentation' => l('documentation', 'http://drupal.org/developing/api/rdf')));
      }
      else {
        $message = t('View RDF mappings for entity types and field bundles used throughout the site. Enabling the RDF UI module (bundled with RDFx) will allow you to configure many of these mappings.');
      }
      return '<p>' . $message . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function rdfx_theme() {
  return array(
    'rdfx_mapping_admin_overview' => array(
      'variables' => array('bundle' => array(), 'rdftype' => array(), 'real_fields' => array(), 'fake_fields' => array()),
    ),
    'rdfx_mapping_admin_overview_row' => array(
      'variables' => array('field' => array()),
    ),
  );
}

/**
 * @param String $type
 *   The entity type.
 *
 * @param String $id
 *   The entity instance ID.
 *
 * @return ARC2 Object
 */
function rdfx_get_rdf_model($type, $id) {
  // Loads entity and its metadata.
  $wrapper = entity_metadata_wrapper($type, $id);
  $entities = entity_load($type, array($id));
  $entity = $entities[$id];
  $data = $wrapper->value();
  $property_info = entity_get_property_info($type);
  $entity_uri = rdfx_resource_uri($type, $entity);

  // Instantiates node resource as ARC2 class and set base and namespaces.
  $res = ARC2::getResource();
  $res->setUri($entity_uri);
  $res->base = url('', array('absolute' => TRUE));
  if (function_exists('rdf_get_namespaces')) {
    $res->ns = rdf_get_namespaces();
  }

  // Initializes ARC2 index.
  $index = array();
  // Constructs the ARC2 index for the RDF model.
  $index = rdfx_get_rdf_data($index, $entity_uri, $wrapper);
  // Attaches the index to the ARC2 resource.
  $res->index = $index;

  return $res;
}

/**
 * Gets a simple PHP array using URI references for some wrapped data.
 */
function rdfx_get_rdf_data(&$index, $subject_uri, $wrapper) {
  // The subject of the triples are by default the entity itself.

  // Asserts RDF types for the entity.
  if ($wrapper instanceof EntityDrupalWrapper) {
    $entity_info = entity_get_property_info($wrapper->type());
    $bundle = $wrapper->getBundle();
    if (!empty($entity_info['bundles'][$bundle]['rdf mapping']['rdf types'])) {
      foreach ($entity_info['bundles'][$bundle]['rdf mapping']['rdf types'] as $rdf_type) {
        $index[$subject_uri]['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'][] = array(
          'value' => $rdf_type,
          'type' => 'uri',
        );
      }
    }
  }

  // Only output the properties the user has access to.
  $filtered = rdfx_property_access_filter($wrapper);
  foreach ($filtered as $name => $property) {
    try {
      $info = $property->info();
      if ($property instanceof EntityDrupalWrapper) {
        // For referenced entities only return the URI.
        if ($property->getIdentifier()) {
          if (!empty($info['rdf mapping']['rdf resource'])) {
            // Uses token to build the referenced resource if 'rdf resource'
            // key is provided.
            $value = token_replace($info['rdf mapping']['rdf resource'], array('node' => $wrapper->value()));
            $type = 'uri';
          }
          elseif (!empty($info['rdf mapping']['rdf value'])) {
            // Uses token to format a string for the value of the property.
            $value = token_replace($info['rdf mapping']['rdf value'], array('node' => $wrapper->value()));
            $type = 'literal';
          }
          else {
            $value = rdfx_resource_uri($property->type(), $property->value());
            $type = 'uri';
          }
          foreach (rdfx_get_predicates($property, $name) as $predicate) {
            $index[$subject_uri][$predicate][] = array(
              'value' => $value,
              'type' => $type,
            );
          }
        }
      }
      elseif ($property instanceof EntityValueWrapper) {
        // @todo tokens
        $datatype = isset($info['rdf mapping']['rdf value datatype']) ? $info['rdf mapping']['rdf value datatype'] : NULL;
        if (!empty($info['rdf mapping']['rdf value callback']) && function_exists($info['rdf mapping']['rdf value callback'])) {
          $value = $info['rdf mapping']['rdf value callback']($property->value());
        }
        else {
          $value = $property->value();
        }
        foreach (rdfx_get_predicates($property, $name) as $predicate) {
          $index[$subject_uri][$predicate][] = array(
            'value' => $value,
            'type' => 'literal',
            'datatype' => $datatype,
          );
        }
      }
      elseif ($property instanceof EntityListWrapper || $property instanceof EntityStructureWrapper) {
        // Creates an intermediary RDF resource whose type and URI can be
        // defined via the RDF mapping.
        // @todo what should happen if 'rdf properties' is defined for a field
        // but no 'rdf types' or 'rdf resource' are defined? should we
        // try to map 'rdf properties' to the field value (e.g. string for
        // text field, URI for reference)? For now we do nothing.
        if (!empty($info['rdf mapping']['rdf resource']) || !empty($info['rdf mapping']['rdf types'])) {
          // Generates a URI for the RDF resource if it looks like it's going
          // to be needed.
          if (!empty($info['rdf mapping']['rdf resource'])) {
            $object_uri = token_replace($info['rdf mapping']['rdf resource'], array('node' => $wrapper->value()));
            $object_type = 'uri';
          }
          // If 'rdf types' is defined without a container URI, a bnode will
          // be needed.
          elseif (!empty($info['rdf mapping']['rdf types'])) {
            $object_uri = '_:' . $name . rdfx_create_bnode_id();
            $object_type = 'bnode';
          }

          if (isset($object_uri)) {
            // Links the entity to the new resource.
            foreach (rdfx_get_predicates($property, $name) as $predicate) {
              $index[$subject_uri][$predicate][] = array(
                'value' => $object_uri,
                'type' => $object_type,
              );
            }
          }
          // Additionally sets the RDF types of the new RDF resource if they
          // are defined.
          if (!empty($info['rdf mapping']['rdf types'])) {
            // Asserts the types of the new resource.
            foreach ($info['rdf mapping']['rdf types'] as $type) {
              $index[$object_uri]['http://www.w3.org/1999/02/22-rdf-syntax-ns#type'][] = array(
                'value' => $type,
                'type' => 'uri',
              );
            }
          }
          // Continues inside the field (field properties) with the new
          // resource URI as subject.
          rdfx_get_rdf_data($index, $object_uri, $property);
        }
        else {
          // Continues inside the field (field properties).
          rdfx_get_rdf_data($index, $subject_uri, $property);
        }
      }
    }
    catch (EntityMetadataWrapperException $e) {
      // A property causes problems - ignore that.
    }
  }
  return $index;
}

function rdfx_property_access_filter($wrapper) {
  $filtered = array();
  foreach ($wrapper as $name => $property) {
    if ($property->access('view')) {
      $filtered[$name] = $property;
    }
  }
  return $filtered;
}

/**
 * Gets the predicates relating the property to the entity.
 */
function rdfx_get_predicates(EntityMetadataWrapper $wrapper, $name) {
  $predicates = array();
  $info = $wrapper->info();
  if (!empty($info['rdf mapping']['rdf properties'])) {
    $predicates = $info['rdf mapping']['rdf properties'];
  }

  // For elements which don't have a mapping, expose them using a local
  // namespace. @todo site vocabulary.
  // This functionality is disabled by default as a lot of this data is
  // irrelevant for outsiders and might contains some data the site owner might
  // not want to expose.
  // @todo provide admin setting to enable this functionality.
  if (!isset($element) && variable_get('rdfx_include_unset_mappings', FALSE)) {
    $predicate[] = 'site:' . (is_numeric($name) ? 'item' : $name);
  }
  return $predicates;
}

/**
 * Returns the URI used for the given resource.
 *
 * @param String $type
 *   The entity type.
 *
 * @param Object $entity
 *
 * @return String
 *   An absolute path to the entity instance.
 */
function rdfx_resource_uri($type, $entity) {
  // Drupal core doesn't define file as a proper entity and therefore cannot
  // return a URI for it, so we have to generate it ourselves.
  if ($type == 'file') {
    $uri = array(
      'path' => file_create_url($entity->uri),
      'options' => array(),
    );
  }
  else {
    $uri = entity_uri($type, $entity);
  }
  return url($uri['path'], array('absolute' => TRUE));

}

/**
 * Returns an new ID everytime it is called to create bnodes.
 *
 * @param none
 *
 * @return Integer
 *   A new ID.
 */
function rdfx_create_bnode_id() {
  static $id = 0;
  return $id++;
}

/**
 * Lists the RDF serializations format which will be integrated with RestWS.
 *
 * Does not implement hook_restws_format_info() because we need to override the
 * RDF serialization format to use our own ARC2 based serializer.
 */
function _rdfx_serialization_formats() {
  $result['rdf'] = array(
    'label' => t('RDF/XML'),
    'class' => 'RDFxRestWSFormatRDFXML',
    'mime type' => 'application/rdf+xml',
  );
  $result['ttl'] = array(
    'label' => t('Turtle'),
    'class' => 'RDFxRestWSFormatTurtle',
    'mime type' => 'application/x-turtle',
  );
  $result['nt'] = array(
    'label' => t('NTriples'),
    'class' => 'RDFxRestWSFormatNTriples',
    'mime type' => 'text/plain',
  );
  $result['rdfjson'] = array(
    'label' => t('RDFJSON'),
    'class' => 'RDFxRestWSFormatRDFJSON',
    'mime type' => 'application/json',
  );
  return $result;
}

/**
 * Implements hook_restws_format_info_alter().
 */
function rdfx_restws_format_info_alter(&$info) {
  $info = _rdfx_serialization_formats() + $info;
}

/**
 * Implements hook_requirements().
 */
function rdfx_requirements($phase) {
  $requirements = array();

  if ($phase == 'runtime') {
    if (class_exists('ARC2')) {
      $value = t('Installed (version @version)', array('@version' => ARC2::getVersion()));
      $severity = REQUIREMENT_OK;
      $description = '';
    }
    else {
      $value = t('Not installed');;
      $severity = REQUIREMENT_ERROR;
      $path = module_exists('libraries') ? libraries_get_path('ARC2') . '/arc/ARC2.php' : drupal_get_path('module', 'rdfx') . '/vendor/arc/ARC2.php';
      $description = t('The RDFx module requires the ARC2 library to function properly. The simplest way to install ARC2 is by using the Drush command "drush rdf-download". Alternatively, you can !download the latest package, unzip it, and move/rename the folder so that the path to ARC2.php is %path', array('!download' => l('download', 'http://github.com/semsol/arc2/tarball/master'), '%path' => $path));
    }
    $requirements['rdfx_arc'] = array(
      'title' => t('RDFx ARC2 Library'),
      'value' => $value,
      'severity' => $severity,
      'description' => $description,
    );

    // If there were any conflicting namespaces...
    if (rdfx_get_conflicting_namespaces()) {
      // Add a requirement warning and break.
      $requirements['rdfx_ns_conflict'] = array(
        'title' => t('RDFx Namespace Conflict'),
        'severity' => REQUIREMENT_ERROR,
        'value' => '',
        'description' => t('One or more namespaces has conflicts.  See this page for more information:') . ' ' . l(t('RDF publishing settings'), 'admin/config/services/rdf/namespaces')
      );
    }
  }
  return $requirements;
}


/**
 * Gets conflicting namespaces.
 * Returns an array of (prefix => array(uri1, uri2, ...)) items.
 */
function rdfx_get_conflicting_namespaces() {
  $conflicting_namespaces = array();

  $rdf_namespaces = module_invoke_all('rdf_namespaces');

  foreach ($rdf_namespaces as $prefix => $uris) {
    if (is_array($uris)) {
      $consolidated_uris = array_unique($uris);

      // A prefix has conflicting namespaces if it has multiple associated URIs.
      if (count($consolidated_uris) > 1) {
        $conflicting_namespaces[$prefix] = $consolidated_uris;
      }
    }
  }
  return $conflicting_namespaces;
}

/**
 * Implementation of hook_features_api().
 */
function rdfx_features_api() {
  return array(
    'rdf_mappings' => array(
      'name' => t('RDF mappings (entity_rdf compatible)'),
      'default_hook' => 'rdf_default_mappings',
      'file' => drupal_get_path('module', 'rdfx') .'/rdfx.features.inc',
    ),
  );
}
