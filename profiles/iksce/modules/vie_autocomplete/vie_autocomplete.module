<?php

/**
 * @file
 * VIE autocomplete module.
 */

/**
 * Implements hook_field_widget_info().
 */
function vie_autocomplete_field_widget_info() {
  return array(
    'vie_autocomplete' => array(
      'label' => t('VIE.js autocomplete'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'size' => 60,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function vie_autocomplete_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $tags = array();
  foreach ($items as $i => $item) {
    $tags[$i] = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
  }

  $element['#attached'] = array(
    'library' => array(
      array('iksce_js', 'vie.autocomplete'),
    ),
    'js' => array(drupal_get_path('module', 'vie_autocomplete') . '/vie_autocomplete.js'),
  );

  $element['value'] = array(
    '#type' => 'textfield',
    '#default_value' => isset($tags[$delta]) ? $tags[$delta]->name : NULL,
    '#attributes' => array('class' => array('vie-autocomplete')),
    '#size' => $instance['widget']['settings']['size'],
    '#maxlength' => 1024,
    '#element_validate' => array('vie_autocomplete_widget_validate'),
  );
  // A hidden element holding the URI of newly created terms.
  $element['uri'] = array(
    '#type' => 'hidden',
  );


  return $element;
}

/**
 * Form element validate handler for taxonomy term autocomplete element.
 */
function vie_autocomplete_widget_validate($element, &$form_state) {
  // Autocomplete widgets do not send their tids in the form, so we must detect
  // them here and process them independently.

  $parents = $element['#array_parents'];
  array_pop($parents);
  $parent_element = drupal_array_get_nested_value($form_state['complete form'], $parents);

  $value = array();
  if ($tag = $element['#value']) {
    // Collect candidate vocabularies.
    $field = field_widget_field($parent_element, $form_state);
    $vocabularies = array();
    foreach ($field['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
        $vocabularies[$vocabulary->vid] = $vocabulary;
      }
    }
    // Translate term names into actual terms.

    // See if the term exists in the chosen vocabulary and return the tid;
    // otherwise, create a new 'autocreate' term for insert/update.
    if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($tag), 'vid' => array_keys($vocabularies)))) {
      $term = array_pop($possibilities);
    }
    else {
      $vocabulary = reset($vocabularies);
      $term = array(
        'tid' => 'autocreate',
        'vid' => $vocabulary->vid,
        'name' => $tag,
        'vocabulary_machine_name' => $vocabulary->machine_name,
      );
    }
    $value[] = (array)$term;
  }

  form_set_value($element, $value, $form_state);
}

/**
 * Implements hook_field_widget_error().
 */
function vie_autocomplete_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}